// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/renanqts/external-dns-openwrt-webhook/pkg/openwrt (interfaces: OpenWRT)
//
// Generated by this command:
//
//	mockgen -destination=../../internal/mocks/openwrt/openwrt.go -package=mocks . OpenWRT
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	openwrt "github.com/renanqts/external-dns-openwrt-webhook/pkg/openwrt"
	gomock "go.uber.org/mock/gomock"
)

// MockOpenWRT is a mock of OpenWRT interface.
type MockOpenWRT struct {
	ctrl     *gomock.Controller
	recorder *MockOpenWRTMockRecorder
	isgomock struct{}
}

// MockOpenWRTMockRecorder is the mock recorder for MockOpenWRT.
type MockOpenWRTMockRecorder struct {
	mock *MockOpenWRT
}

// NewMockOpenWRT creates a new mock instance.
func NewMockOpenWRT(ctrl *gomock.Controller) *MockOpenWRT {
	mock := &MockOpenWRT{ctrl: ctrl}
	mock.recorder = &MockOpenWRTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenWRT) EXPECT() *MockOpenWRTMockRecorder {
	return m.recorder
}

// DeleteDNSRecords mocks base method.
func (m *MockOpenWRT) DeleteDNSRecords(arg0 context.Context, arg1 []openwrt.DNSRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNSRecords indicates an expected call of DeleteDNSRecords.
func (mr *MockOpenWRTMockRecorder) DeleteDNSRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSRecords", reflect.TypeOf((*MockOpenWRT)(nil).DeleteDNSRecords), arg0, arg1)
}

// GetDNSRecords mocks base method.
func (m *MockOpenWRT) GetDNSRecords(arg0 context.Context) (map[string]openwrt.DNSRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSRecords", arg0)
	ret0, _ := ret[0].(map[string]openwrt.DNSRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSRecords indicates an expected call of GetDNSRecords.
func (mr *MockOpenWRTMockRecorder) GetDNSRecords(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSRecords", reflect.TypeOf((*MockOpenWRT)(nil).GetDNSRecords), arg0)
}

// SetDNSRecords mocks base method.
func (m *MockOpenWRT) SetDNSRecords(arg0 context.Context, arg1 []openwrt.DNSRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDNSRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDNSRecords indicates an expected call of SetDNSRecords.
func (mr *MockOpenWRTMockRecorder) SetDNSRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDNSRecords", reflect.TypeOf((*MockOpenWRT)(nil).SetDNSRecords), arg0, arg1)
}

// UpdateDNSRecords mocks base method.
func (m *MockOpenWRT) UpdateDNSRecords(arg0 context.Context, arg1 []openwrt.DNSRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDNSRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDNSRecords indicates an expected call of UpdateDNSRecords.
func (mr *MockOpenWRTMockRecorder) UpdateDNSRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDNSRecords", reflect.TypeOf((*MockOpenWRT)(nil).UpdateDNSRecords), arg0, arg1)
}
